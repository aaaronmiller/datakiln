\"\"\"\nDeep Research Node for Gemini Provider\n\nThis node handles the full Gemini Deep Research workflow:\n1. Input query\n2. Click text input\n3. Select deep research mode\n4. Submit query\n5. Wait and approve results\n6. Copy to clipboard\n\"\"\"\n\nfrom typing import Dict, Any, List, Optional\nfrom ..base_node import BaseNode\nfrom ...providers.gemini_automation import GeminiAutomation\nfrom ...services.dom_actions import execute_action_sequence\nimport asyncio\n\nclass GeminiDeepResearchNode(BaseNode):\n    def __init__(self, query: str = '', depth: str = 'balanced', **kwargs):\n        super().__init__(\n            name='Gemini Deep Research',\n            type='gemini_deep_research',\n            description='Perform deep research query on Gemini',\n            inputs=['query'],\n            outputs=['research_results'],\n            **kwargs\n        )\n        self.query = query\n        self.depth = depth\n        self.automation = GeminiAutomation()\n\n    async def execute(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        try:\n            # Get input query\n            input_query = self.get_input_value(context, 'query', self.query)\n            if not input_query:\n                raise ValueError('No query provided')\n\n            self.mark_started('Navigating to Gemini...')\n\n            # Step 1: Navigate to Gemini Deep Research page (assume tab open)\n            await self.automation.navigate_to_gemini()\n\n            # Step 2: Click text input area\n            await execute_action_sequence([\n                {'selector': '[contenteditable=\"true\"]', 'action': 'click'}\n            ])\n\n            # Step 3: Type the query\n            await execute_action_sequence([\n                {'selector': '[contenteditable=\"true\"]', 'action': 'type', 'value': input_query}\n            ])\n\n            # Step 4: Select deep research mode\n            await execute_action_sequence([\n                {'selector': 'div.label:has-text(\"Deep Research\")', 'action': 'click'}\n            ])\n\n            # Step 5: Submit\n            await execute_action_sequence([\n                {'selector': 'mat-icon[fonticon=\"send\"]', 'action': 'click'}\n            ])\n\n            # Step 6: Wait for response (4-5 seconds)\n            await asyncio.sleep(5)\n\n            # Step 7: Approve/confirm if needed\n            try:\n                await execute_action_sequence([\n                    {'selector': 'span.mdc-button__label:has-text(\"Start research\")', 'action': 'click'}\n                ])\n            except Exception as e:\n                self.log_info(f'No approval needed: {e}')\n\n            # Step 8: Wait for research completion (~2 minutes, poll for results)\n            self.mark_running('Waiting for deep research... (2 min)')\n            await asyncio.sleep(120)  # Adjust based on depth\n\n            # Step 9: Copy results to clipboard\n            results = await execute_action_sequence([\n                {'selector': 'span.mat-mdc-list-item-title:has-text(\"Copy\")', 'action': 'click'}\n            ], return_data=True)\n\n            output = {\n                'research_results': results,\n                'query': input_query,\n                'depth': self.depth,\n                'timestamp': asyncio.get_event_loop().time()\n            }\n\n            self.mark_completed(output)\n            return {'research_results': results}\n\n        except Exception as e:\n            error_msg = f'Deep research failed: {str(e)}'\n            self.log_error(error_msg)\n            self.mark_failed(error_msg)\n            return {'error': error_msg}\n\n# Node definition for registry\nGEMINI_DEEP_RESEARCH_DEFINITION = {\n    'type': 'gemini_deep_research',\n    'name': 'Gemini Deep Research',\n    'description': 'Full Gemini deep research workflow with DOM automation',\n    'version': '1.0.0',\n    'inputs': ['query'],\n    'outputs': ['research_results'],\n    'params_schema': {\n        'type': 'object',\n        'required': ['query'],\n        'properties': {\n            'query': {'type': 'string', 'description': 'Research query'},\n            'depth': {\n                'type': 'string',\n                'enum': ['shallow', 'balanced', 'deep'],\n                'default': 'balanced',\n                'description': 'Research depth'\n            }\n        }\n    },\n    'metadata': {\n        'author': 'System',\n        'category': 'provider',\n        'tags': ['gemini', 'deep_research', 'automation'],\n        'requires_browser': True\n    }\n}","replace_all":false}