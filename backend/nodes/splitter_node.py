\"\"\"\nQuery Splitter Node\n\nSplits a query into multiple sub-queries using AI, outputs to multiple branches for parallel processing.\n\"\"\"\n\nfrom typing import Dict, Any, List\nfrom ..base_node import BaseNode\nfrom ...providers.gemini_automation import GeminiAutomation\n\nclass QuerySplitterNode(BaseNode):\n    def __init__(self, num_splits: int = 3, model: str = 'gemini-pro', structure: str = 'json_array', **kwargs):\n        super().__init__(\n            name='Query Splitter',\n            type='splitter',\n            description='Split query for parallel processing',\n            inputs=['query'],\n            outputs=['split_queries'],\n            **kwargs\n        )\n        self.num_splits = num_splits\n        self.model = model\n        self.structure = structure\n        self.gemini = GeminiAutomation(model=self.model)\n\n    async def execute(self, context: Dict[str, Any]) -> Dict[str, Any]:\n        try:\n            input_query = self.get_input_value(context, 'query')\n            if not input_query:\n                raise ValueError('No query to split')\n\n            # Prompt for splitting\n            split_prompt = f\"\"\"Take this complex query and split it into {self.num_splits} separate research tasks.\n\nQuery: {input_query}\n\nOutput in structured JSON array with {self.num_splits} objects, each with 'query' field containing a sub-query.\nEnsure the sub-queries cover the full scope when combined, optimized for deep research (e.g., 7 sub-questions each).\n\nExample output:\\n[{\"query\": \"sub1\"}, {\"query\": \"sub2\"}, ...]\"\"\"\n\n            # Call AI to split\n            response = await self.gemini.generate(split_prompt)\n            split_queries = self.gemini.parse_json_array(response, 'query')\n\n            if len(split_queries) != self.num_splits:\n                raise ValueError(f'Expected {self.num_splits} splits, got {len(split_queries)}')\n\n            output = {\n                'split_queries': split_queries,\n                'original_query': input_query,\n                'num_splits': self.num_splits,\n                'structure': self.structure\n            }\n\n            self.mark_completed(output)\n            return output\n\n        except Exception as e:\n            error_msg = f'Splitter failed: {str(e)}'\n            self.mark_failed(error_msg)\n            return {'error': error_msg}\n\n# Definition\nSPLITTER_DEFINITION = {\n    'type': 'splitter',\n    'name': 'Query Splitter',\n    'description': 'Split query into parallel research tasks',\n    'version': '1.0.0',\n    'inputs': ['query'],\n    'outputs': ['split_queries'],\n    'params_schema': {\n        'type': 'object',\n        'properties': {\n            'num_splits': {'type': 'integer', 'minimum': 1, 'maximum': 10, 'default': 3},\n            'model': {'type': 'string', 'default': 'gemini-pro'},\n            'structure': {'type': 'string', 'enum': ['json_array', 'structured'], 'default': 'json_array'}\n        }\n    },\n    'metadata': {'category': 'logic', 'tags': ['split', 'parallel', 'branch']}\n}